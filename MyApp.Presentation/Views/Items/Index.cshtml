@model MyApp.Presentation.Models.ItemsIndexViewModel
@{
    ViewData["Title"] = "Artículos";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-cubes"></i> Artículos</h1>
    @if (User.IsInRole("Administrator"))
    {
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Agregar Nuevo Artículo
        </a>
    }
</div>

<!-- Búsqueda y Filtros -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3" id="filterForm">
            <!-- Mantener parámetros de ordenamiento y paginación -->
            <input type="hidden" name="sortBy" value="@Model.SortBy" />
            <input type="hidden" name="sortOrder" value="@Model.SortOrder" />
            <input type="hidden" name="page" value="1" /> <!-- Reset a página 1 cuando se filtra -->
            <input type="hidden" name="pageSize" value="@Model.PageSize" />

            <div class="col-md-3">
                <label for="search" class="form-label">Buscar</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" name="search" id="search" class="form-control"
                           value="@Model.SearchTerm" placeholder="Buscar por nombre, código..." />
                </div>
            </div>
            <div class="col-md-3">
                <label for="category" class="form-label">Categoría</label>
                <select name="category" id="category" class="form-select">
                    <option value="">Todas las Categorías</option>
                    @foreach (var cat in Model.Categories)
                    {
                        <option value="@cat" selected="@(cat == Model.SelectedCategory)">@cat</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="status" class="form-label">Estado</label>
                <select name="status" id="status" class="form-select">
                    <option value="">Todos los Estados</option>
                    @foreach (var status in Enum.GetValues<MyApp.Entities.Enums.ItemStatus>())
                    {
                        <option value="@((int)status)" selected="@(status == Model.SelectedStatus)">@GetStatusText(status)</option>
                    }
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <div class="btn-group w-100">
                    <button type="submit" class="btn btn-outline-primary">
                        <i class="fas fa-filter"></i> Filtrar
                    </button>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i> Limpiar
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Controles de Paginación Superior -->
@if (Model.PagedItems.TotalItems > 0)
{
    <div class="card mb-3">
        <div class="card-body py-2">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="d-flex align-items-center gap-3">
                        <!-- Items por página -->
                        <form method="get" class="d-flex align-items-center gap-2">
                            <input type="hidden" name="search" value="@Model.SearchTerm" />
                            <input type="hidden" name="category" value="@Model.SelectedCategory" />
                            <input type="hidden" name="status" value="@Model.SelectedStatus" />
                            <input type="hidden" name="sortBy" value="@Model.SortBy" />
                            <input type="hidden" name="sortOrder" value="@Model.SortOrder" />
                            <input type="hidden" name="page" value="1" />

                            <label class="form-label mb-0 small">Mostrar:</label>
                            <select name="pageSize" class="form-select form-select-sm" style="width: auto;" onchange="this.form.submit()">
                                <option value="5" selected="@(Model.PageSize == 5)">5</option>
                                <option value="10" selected="@(Model.PageSize == 10)">10</option>
                                <option value="25" selected="@(Model.PageSize == 25)">25</option>
                                <option value="50" selected="@(Model.PageSize == 50)">50</option>
                            </select>
                            <span class="small text-muted">por página</span>
                        </form>

                        <!-- Información de resultados -->
                        <span class="small text-muted">
                            Mostrando @Model.PagedItems.StartItem-@Model.PagedItems.EndItem de @Model.PagedItems.TotalItems artículos
                        </span>
                    </div>
                </div>
                <div class="col-md-6">
                    <!-- Ordenamiento -->
                    <div class="d-flex justify-content-end align-items-center gap-2">
                        <span class="small text-muted">Ordenar por:</span>
                        <div class="btn-group btn-group-sm">
                            <a asp-action="Index"
                               asp-route-search="@Model.SearchTerm"
                               asp-route-category="@Model.SelectedCategory"
                               asp-route-status="@Model.SelectedStatus"
                               asp-route-sortBy="Name"
                               asp-route-sortOrder="@(Model.SortBy == "Name" && Model.SortOrder == "asc" ? "desc" : "asc")"
                               asp-route-page="@Model.PagedItems.CurrentPage"
                               asp-route-pageSize="@Model.PageSize"
                               class="btn btn-outline-secondary @(Model.SortBy == "Name" ? "active" : "")">
                                Nombre @if (Model.SortBy == "Name")
                                {
                                    <i class="fas fa-sort-@(Model.SortOrder == "asc" ? "up" : "down")"></i>
                                }
                            </a>
                            <a asp-action="Index"
                               asp-route-search="@Model.SearchTerm"
                               asp-route-category="@Model.SelectedCategory"
                               asp-route-status="@Model.SelectedStatus"
                               asp-route-sortBy="Code"
                               asp-route-sortOrder="@(Model.SortBy == "Code" && Model.SortOrder == "asc" ? "desc" : "asc")"
                               asp-route-page="@Model.PagedItems.CurrentPage"
                               asp-route-pageSize="@Model.PageSize"
                               class="btn btn-outline-secondary @(Model.SortBy == "Code" ? "active" : "")">
                                Código @if (Model.SortBy == "Code")
                                {
                                    <i class="fas fa-sort-@(Model.SortOrder == "asc" ? "up" : "down")"></i>
                                }
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Tabla de Artículos -->
@if (Model.PagedItems.Items.Any())
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Código</th>
                            <th>Nombre</th>
                            <th>Categoría</th>
                            <th>Estado</th>
                            <th>Ubicación</th>
                            <th>Creado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.PagedItems.Items)
                        {
                            <tr>
                                <td><code>@item.Code</code></td>
                                <td>@item.Name</td>
                                <td>
                                    <span class="badge bg-secondary">@item.Category</span>
                                </td>
                                <td>
                                    <span class="badge bg-@GetStatusBadgeClass(item.Status)">
                                        @GetStatusText(item.Status)
                                    </span>
                                </td>
                                <td>@item.Location</td>
                                <td>@item.CreatedDate.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a asp-action="Details" asp-route-id="@item.Id"
                                           class="btn btn-outline-info" title="Ver Detalles">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if (User.IsInRole("Administrator"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.Id"
                                               class="btn btn-outline-warning" title="Editar">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.Id"
                                               class="btn btn-outline-danger" title="Eliminar">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Paginación -->
    @if (Model.PagedItems.TotalPages > 1)
    {
        <nav aria-label="Paginación de artículos" class="mt-4">
            <ul class="pagination justify-content-center">
                <!-- Botón Anterior -->
                <li class="page-item @(!Model.PagedItems.HasPreviousPage ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="Index"
                       asp-route-search="@Model.SearchTerm"
                       asp-route-category="@Model.SelectedCategory"
                       asp-route-status="@Model.SelectedStatus"
                       asp-route-sortBy="@Model.SortBy"
                       asp-route-sortOrder="@Model.SortOrder"
                       asp-route-page="@(Model.PagedItems.CurrentPage - 1)"
                       asp-route-pageSize="@Model.PageSize">
                        <i class="fas fa-chevron-left"></i> Anterior
                    </a>
                </li>

                <!-- Números de página -->
                @{
                    var startPage = Math.Max(1, Model.PagedItems.CurrentPage - 2);
                    var endPage = Math.Min(Model.PagedItems.TotalPages, Model.PagedItems.CurrentPage + 2);
                }

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link"
                           asp-action="Index"
                           asp-route-search="@Model.SearchTerm"
                           asp-route-category="@Model.SelectedCategory"
                           asp-route-status="@Model.SelectedStatus"
                           asp-route-sortBy="@Model.SortBy"
                           asp-route-sortOrder="@Model.SortOrder"
                           asp-route-page="1"
                           asp-route-pageSize="@Model.PageSize">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.PagedItems.CurrentPage ? "active" : "")">
                        <a class="page-link"
                           asp-action="Index"
                           asp-route-search="@Model.SearchTerm"
                           asp-route-category="@Model.SelectedCategory"
                           asp-route-status="@Model.SelectedStatus"
                           asp-route-sortBy="@Model.SortBy"
                           asp-route-sortOrder="@Model.SortOrder"
                           asp-route-page="@i"
                           asp-route-pageSize="@Model.PageSize">@i</a>
                    </li>
                }

                @if (endPage < Model.PagedItems.TotalPages)
                {
                    @if (endPage < Model.PagedItems.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link"
                           asp-action="Index"
                           asp-route-search="@Model.SearchTerm"
                           asp-route-category="@Model.SelectedCategory"
                           asp-route-status="@Model.SelectedStatus"
                           asp-route-sortBy="@Model.SortBy"
                           asp-route-sortOrder="@Model.SortOrder"
                           asp-route-page="@Model.PagedItems.TotalPages"
                           asp-route-pageSize="@Model.PageSize">@Model.PagedItems.TotalPages</a>
                    </li>
                }

                <!-- Botón Siguiente -->
                <li class="page-item @(!Model.PagedItems.HasNextPage ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="Index"
                       asp-route-search="@Model.SearchTerm"
                       asp-route-category="@Model.SelectedCategory"
                       asp-route-status="@Model.SelectedStatus"
                       asp-route-sortBy="@Model.SortBy"
                       asp-route-sortOrder="@Model.SortOrder"
                       asp-route-page="@(Model.PagedItems.CurrentPage + 1)"
                       asp-route-pageSize="@Model.PageSize">
                        Siguiente <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </nav>
    }
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-search fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No se encontraron artículos</h4>
        @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.SelectedCategory) || Model.SelectedStatus.HasValue)
        {
            <p class="text-muted">Intenta ajustar tus criterios de búsqueda.</p>
            <a asp-action="Index" class="btn btn-outline-primary">
                <i class="fas fa-times"></i> Limpiar Filtros
            </a>
        }
        else
        {
            <p class="text-muted">No hay artículos registrados en el sistema.</p>
            @if (User.IsInRole("Administrator"))
            {
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Agregar Primer Artículo
                </a>
            }
        }
    </div>
}

@functions {
    string GetStatusBadgeClass(MyApp.Entities.Enums.ItemStatus status)
    {
        return status switch
        {
            MyApp.Entities.Enums.ItemStatus.Available => "success",
            MyApp.Entities.Enums.ItemStatus.OnLoan => "warning",
            MyApp.Entities.Enums.ItemStatus.Maintenance => "info",
            MyApp.Entities.Enums.ItemStatus.Decommissioned => "danger",
            _ => "secondary"
        };
    }

    string GetStatusText(MyApp.Entities.Enums.ItemStatus status)
    {
        return status switch
        {
            MyApp.Entities.Enums.ItemStatus.Available => "Disponible",
            MyApp.Entities.Enums.ItemStatus.OnLoan => "En Préstamo",
            MyApp.Entities.Enums.ItemStatus.Maintenance => "Mantenimiento",
            MyApp.Entities.Enums.ItemStatus.Decommissioned => "Fuera de Servicio",
            _ => "Desconocido"
        };
    }
}

@section Scripts {
    <script>
        // Funcionalidad de búsqueda en tiempo real (opcional)
        let searchTimeout;
        document.getElementById('search').addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(function() {
                if (e.target.value.length >= 2 || e.target.value.length === 0) {
                    document.getElementById('filterForm').submit();
                }
            }, 800); // Esperar 800ms antes de buscar
        });

        // Mantener el foco en el campo de búsqueda después de filtrar
        @if (!string.IsNullOrEmpty(Model.SearchTerm))
        {
            <text>
                document.addEventListener('DOMContentLoaded', function() {
                    const searchInput = document.getElementById('search');
                    if (searchInput) {
                        searchInput.focus();
                        searchInput.setSelectionRange(searchInput.value.length, searchInput.value.length);
                    }
                });
            </text>
        }
    </script>
}